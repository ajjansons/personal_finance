import { useEffect, useState, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { getRepository } from '@/lib/repository';
import type { ResearchReport } from '@/features/research/types';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import ReportTOC from '@/components/research/ReportTOC';
import ReportSection from '@/components/research/ReportSection';
import SourcesList from '@/components/research/SourcesList';

export default function ResearchReportPage() {
  const { reportId } = useParams<{ reportId: string }>();
  const navigate = useNavigate();
  const [activeSection, setActiveSection] = useState<string | undefined>();
  const contentRef = useRef<HTMLDivElement>(null);

  const { data: report, isLoading } = useQuery<ResearchReport | null>({
    queryKey: ['research-report', reportId],
    queryFn: async () => {
      if (!reportId) return null;
      return getRepository().getResearchReport(reportId);
    },
    enabled: Boolean(reportId)
  });

  // Track which section is in view
  useEffect(() => {
    if (!report?.sections.length) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveSection(entry.target.id);
          }
        });
      },
      {
        rootMargin: '-100px 0px -66%',
        threshold: 0
      }
    );

    const sections = contentRef.current?.querySelectorAll('section[id]');
    sections?.forEach((section) => observer.observe(section));

    return () => observer.disconnect();
  }, [report]);

  const handleNavigate = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    element?.scrollIntoView({ behavior: 'smooth', block: 'start' });
  };

  const handleExportMarkdown = () => {
    if (!report) return;

    // Build markdown content
    let markdown = `# ${report.subjectName} Research Report\n\n`;
    markdown += `**Generated:** ${new Date(report.createdAt).toLocaleDateString()}\n`;
    markdown += `**Model:** ${report.modelId}\n\n`;
    markdown += `---\n\n`;

    // Add table of contents
    markdown += `## Table of Contents\n\n`;
    report.sections.forEach((section, idx) => {
      markdown += `${idx + 1}. [${section.title}](#${section.id})\n`;
    });
    markdown += `\n---\n\n`;

    // Add sections
    report.sections.forEach((section) => {
      markdown += `## ${section.title}\n\n`;
      markdown += `${section.bodyMd}\n\n`;

      if (section.bullets && section.bullets.length > 0) {
        markdown += `### Key Takeaways\n\n`;
        section.bullets.forEach((bullet) => {
          markdown += `- ${bullet}\n`;
        });
        markdown += `\n`;
      }

      if (section.tables && section.tables.length > 0) {
        section.tables.forEach((table) => {
          if (table.caption) {
            markdown += `### ${table.caption}\n\n`;
          }
          markdown += `| ${table.headers.join(' | ')} |\n`;
          markdown += `| ${table.headers.map(() => '---').join(' | ')} |\n`;
          table.rows.forEach((row) => {
            markdown += `| ${row.join(' | ')} |\n`;
          });
          markdown += `\n`;
        });
      }

      markdown += `---\n\n`;
    });

    // Add sources
    if (report.sources.length > 0) {
      markdown += `## Sources\n\n`;
      report.sources.forEach((source, idx) => {
        markdown += `[${idx + 1}] [${source.title}](${source.url}) - ${source.type}\n`;
        if (source.excerpt) {
          markdown += `   ${source.excerpt}\n`;
        }
        markdown += `\n`;
      });
    }

    // Add disclaimer
    markdown += `\n---\n\n`;
    markdown += `*This research report is generated by AI for informational purposes only and does not constitute financial advice.*\n`;

    // Create and download file
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.subjectName.replace(/[^a-z0-9]/gi, '-')}-research-report.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (isLoading) {
    return (
      <div className="space-y-6">
        <Card className="p-6">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-slate-700 rounded w-1/3"></div>
            <div className="h-4 bg-slate-700 rounded w-1/2"></div>
            <div className="h-32 bg-slate-700 rounded"></div>
          </div>
        </Card>
      </div>
    );
  }

  if (!report) {
    return (
      <div className="space-y-6">
        <Card className="p-6">
          <p className="text-slate-400">Report not found.</p>
          <Button onClick={() => navigate('/holdings')} className="mt-4">
            Back to Holdings
          </Button>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card className="p-6">
        <div className="flex items-start justify-between gap-4 flex-wrap">
          <div className="flex-1">
            <h1 className="text-3xl font-bold gradient-text mb-2">{report.subjectName}</h1>
            <div className="flex items-center gap-4 text-sm text-slate-400">
              <span>Generated {new Date(report.createdAt).toLocaleDateString()}</span>
              <span>•</span>
              <span>Model: {report.modelId}</span>
              {report.metadata?.holdingSymbol && (
                <>
                  <span>•</span>
                  <span className="text-emerald-400 font-mono">{report.metadata.holdingSymbol}</span>
                </>
              )}
            </div>
          </div>
          <div className="flex gap-2">
            <Button variant="ghost" onClick={() => navigate('/holdings')}>
              Back
            </Button>
            <Button onClick={handleExportMarkdown}>Export to .md</Button>
          </div>
        </div>
      </Card>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar - Table of Contents */}
        <div className="lg:col-span-1">
          <Card className="p-4 sticky top-6">
            <ReportTOC
              sections={report.sections}
              activeSection={activeSection}
              onNavigate={handleNavigate}
            />
          </Card>
        </div>

        {/* Report Content */}
        <div className="lg:col-span-3 space-y-8" ref={contentRef}>
          {report.sections.map((section) => (
            <Card key={section.id} className="p-6">
              <ReportSection section={section} />
            </Card>
          ))}

          {/* Sources */}
          <Card className="p-6">
            <SourcesList sources={report.sources} />
          </Card>
        </div>
      </div>
    </div>
  );
}